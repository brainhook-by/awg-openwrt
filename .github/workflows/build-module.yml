name: Create Release on Tag

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    name: "Build OpenWrt with AmneziaWG"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_env:
          - tag: "22.03.4"
            pkgarch: mipsel_24kc
            target: ramips
            subtarget: mt76x8

    steps:
      - uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt
          ref: v${{ matrix.build_env.tag }}
          fetch-depth: 0
      - name: Remove ccache from tools
        run: |
          sed -i '/ccache/d' tools/Makefile
          
      - name: Cache dl
        uses: actions/cache@v4
        with:
          path: dl
          key: ${{ runner.os }}-openwrt-dl-${{ matrix.build_env.tag }}
          restore-keys: |
            ${{ runner.os }}-openwrt-dl-

      - name: Prepare build system
        run: |
          echo "pkgarch: ${{ matrix.build_env.pkgarch }}, target:${{ matrix.build_env.target }}, subtarget: ${{ matrix.build_env.subtarget }}"

          # Setup & install feeds
          wget https://downloads.openwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/feeds.buildinfo -O feeds.conf
          echo "src-git awgopenwrt https://github.com/yury-sannikov/awg-openwrt.git" >> ./feeds.conf
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          # Setup config with AWG and dependencies
          wget https://downloads.openwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/config.buildinfo -O .config
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m" >> .config

          # Disable ccache to avoid build errors
          echo "CONFIG_CCACHE=n" >> .config

          make defconfig

      - name: Build toolchain and kernel (without ccache)
        run: |
          # Build tools, skipping ccache
          make tools/install -j$(nproc) V=s IGNORE_ERRORS=m || true
          make tools/ccache/clean

          # Build toolchain and kernel
          make toolchain/install -j$(nproc) V=s
          make target/linux/compile -j$(nproc) V=s

          VERMAGIC=$(cat ./build_dir/target-*/linux-*/linux-*/.vermagic)
          echo "VERMAGIC=$VERMAGIC" | tee -a $GITHUB_ENV

      - name: Build AmneziaWG packages
        run: |
          echo "Kernel vermagic: $VERMAGIC"

          make package/kmod-amneziawg/{clean,download,prepare,compile} V=s || true
          make package/luci-app-amneziawg/{clean,download,prepare,compile} V=s
          make package/amneziawg-tools/{clean,download,prepare,compile} V=s

      - name: Prepare artifacts
        run: |
          tag_name=${{ github.ref_name }}
          mkdir -p awgrelease
          postfix="${tag_name}_v${{ matrix.build_env.tag }}_${{ matrix.build_env.pkgarch}}_${{ matrix.build_env.target}}_${{ matrix.build_env.subtarget}}_${VERMAGIC}"

          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk awgrelease/amneziawg-tools_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/luci-app-amneziawg_*.ipk awgrelease/luci-app-amneziawg_${postfix}.ipk
          cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/kmod-amneziawg_*.ipk awgrelease/kmod-amneziawg_${postfix}.ipk

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: awgrelease/*.ipk
